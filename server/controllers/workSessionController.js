const { WorkSession, User} = require('../models/models'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
const { Op } = require('sequelize'); // –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
const ApiError = require('../error/ApiError')
class WorkSessionController {
    // üîπ 1. –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é
    async startSession(req, res, next) {
        try {
            const { userId } = req.body;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            const user = await User.findByPk(userId);
            if (!user) {
                return res.status(404).json({ message: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
            const activeSession = await WorkSession.findOne({
                where: { userId, end_time: null }
            });

            if (activeSession) {
                return next(ApiError.badRequest('–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è' ))
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            const session = await WorkSession.create({ userId, start_time: new Date() });
            return res.status(201).json(session);
        } catch (error) {
            next(ApiError.badRequest(error.message))
        }
    }

    // üîπ 2. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å–µ—Å—Å–∏—é
    async endSession(req, res, next) {
        try {
            const { userId } = req.body;

            // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            const session = await WorkSession.findOne({
                where: { userId, end_time: null }
            });

            if (!session) {
                return next(ApiError.badRequest( '–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' ));
            }

            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            session.end_time = new Date();
            await session.save();

            return res.json(session);
        } catch (error) {
            next(ApiError.badRequest(error.message))
        }
    }
    // üîπ 3. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π (–º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏ –¥–∞—Ç–∞–º)
    async getSessions(req, res, next) {
        try {
            const { userId, start_date, end_date } = req.query;

            let whereClause = {};
            if (userId) whereClause.userId = userId;
            if (start_date && end_date) {
                whereClause.start_time = {
                    [Op.between]: [new Date(start_date), new Date(end_date)]
                };
            }

            const sessions = await WorkSession.findAll();
            return res.json(sessions);
        } catch (error) {
            next(ApiError.badRequest(error.message))
        }
    }

    // üîπ 4. –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    async deleteSession(req, res, next) {
        try {
            const { id } = req.params;
            const session = await WorkSession.findByPk(id);

            if (!session) {
                return res.status(404).json({ message: '–†–∞–±–æ—á–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            }

            await session.destroy();
            return res.json({ message: '–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞' });
        } catch (error) {
            next(ApiError.badRequest(error.message))
        }
    }
}

module.exports = new WorkSessionController();
