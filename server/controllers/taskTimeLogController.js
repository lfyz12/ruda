const { TaskTimeLog, User, Task, Ticket} = require('../models/models');
const ApiError = require('../error/ApiError');

class TaskTimeLogController {
    // üîπ –ù–∞—á–∞—Ç—å —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π
    async startTaskTimeLog(req, res, next) {
        try {
            const { userId, ticketId, start_time } = req.body;

            if (!userId || !ticketId) {
                return next(ApiError.badRequest("–ù–µ —É–∫–∞–∑–∞–Ω employee_id –∏–ª–∏ task_id"));
            }

            const employee = await User.findByPk(userId);
            if (!employee) {
                return next(ApiError.badRequest("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"));
            }

            const task = await Ticket.findByPk(ticketId);
            if (!task) {
                return next(ApiError.badRequest("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
            }

            const taskTimeLog = await TaskTimeLog.create({
                userId,
                ticketId,
                start_time: start_time || new Date()
            });

            return res.json(taskTimeLog);
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ TaskTimeLog"));
        }
    }

    // üîπ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
    async endTaskTimeLog(req, res, next) {
        try {
            const { id } = req.params;
            const { end_time } = req.body;

            const taskTimeLog = await TaskTimeLog.findByPk(id);
            if (!taskTimeLog) {
                return next(ApiError.badRequest("–ó–∞–ø–∏—Å—å TaskTimeLog –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
            }

            if (taskTimeLog.end_time) {
                return next(ApiError.badRequest("–≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"));
            }

            taskTimeLog.end_time = end_time || new Date();
            await taskTimeLog.save();

            return res.json(taskTimeLog);
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è TaskTimeLog"));
        }
    }

    // üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ TaskTimeLog
    async getAllTaskTimeLogs(req, res, next) {
        try {
            const taskTimeLogs = await TaskTimeLog.findAll({ include: [User, Ticket] });
            return res.json(taskTimeLogs);
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π TaskTimeLog"));
        }
    }

    // üîπ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    async getTaskTimeLogsByEmployee(req, res, next) {
        try {
            const { userId } = req.params;

            const taskTimeLogs = await TaskTimeLog.findAll({
                where: { userId },
                include: [Ticket]
            });

            if (!taskTimeLogs.length) {
                return next(ApiError.badRequest("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π TaskTimeLog –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"));
            }

            return res.json(taskTimeLogs);
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π TaskTimeLog –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"));
        }
    }

    // üîπ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ
    async getTaskTimeLogsByTask(req, res, next) {
        try {
            const { ticketId } = req.params;

            const taskTimeLogs = await TaskTimeLog.findAll({
                where: { ticketId },
                include: [User]
            });

            if (!taskTimeLogs.length) {
                return next(ApiError.badRequest("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π TaskTimeLog –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏"));
            }

            return res.json(taskTimeLogs);
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π TaskTimeLog –ø–æ –∑–∞–¥–∞—á–µ"));
        }
    }

    // üîπ –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å TaskTimeLog
    async deleteTaskTimeLog(req, res, next) {
        try {
            const { id } = req.params;

            const taskTimeLog = await TaskTimeLog.findByPk(id);
            if (!taskTimeLog) {
                return next(ApiError.badRequest("–ó–∞–ø–∏—Å—å TaskTimeLog –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
            }

            await taskTimeLog.destroy();
            return res.json({ message: "–ó–∞–ø–∏—Å—å TaskTimeLog —É–¥–∞–ª–µ–Ω–∞" });
        } catch (error) {
            return next(ApiError.badRequest("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è TaskTimeLog"));
        }
    }
}

module.exports = new TaskTimeLogController();
